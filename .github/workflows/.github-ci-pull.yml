name: CI Pipeline

on:
  pull_request:
    branches: [main]

jobs:
  validate_branch_name:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Validate branch name
        env:
          BRANCH_NAME: ${{ github.head_ref }}
        run: |
          echo "Validating branch naming convention..."
          if [[ "$BRANCH_NAME" =~ ^(feature|fix)/[A-Za-z0-9._-]+$ ]]; then
            echo "✔ Branch name valid"
            
            echo "## ✅ Branch Name Validation (Pull Request)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Branch Name | \`$BRANCH_NAME\` |" >> $GITHUB_STEP_SUMMARY
            echo "| Type | ${BRANCH_NAME%%/*} |" >> $GITHUB_STEP_SUMMARY
            echo "| Status | ✅ Valid |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Branch follows naming convention:** \`feature/*\` or \`fix/*\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Branch Name Validation Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Branch Name | \`$BRANCH_NAME\` |" >> $GITHUB_STEP_SUMMARY
            echo "| Status | ❌ Invalid |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Required format:** \`feature/description\` or \`fix/description\`" >> $GITHUB_STEP_SUMMARY
            
            echo "❌ Invalid branch name: $BRANCH_NAME"
            exit 1
          fi

  validate_version_bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Validate version bump
        env:
          BRANCH_NAME: ${{ github.head_ref }}
        run: |
          echo "## 🔄 Version Bump Validation (Pull Request)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          git fetch origin main
          if ! git ls-tree -r origin/main --name-only | grep -q '^package.json$'; then
            echo "No package.json found in main branch – skipping"
            echo "| Status | ⏭️ Skipped (no package.json in main) |" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          MAIN_VERSION=$(git show origin/main:package.json | jq -r .version)
          CURRENT_VERSION=$(jq -r .version package.json)

          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | \`$BRANCH_NAME\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Main Version | \`$MAIN_VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Current Version | \`$CURRENT_VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "Main version:    $MAIN_VERSION"
          echo "Current version: $CURRENT_VERSION"

          # --- Skip validation if either version is 0.0.0 ---
          if [ "$MAIN_VERSION" = "0.0.0" ] || [ "$CURRENT_VERSION" = "0.0.0" ]; then
            echo "Version 0.0.0 detected – skipping version validation"
            echo "| Status | ⏭️ Skipped (development version) |" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # --- Parse semver X.Y.Z in a shellcheck-friendly way ---
          # Strip prerelease/build metadata (e.g. "1.2.3-beta.1" -> "1.2.3")
          MAIN_SIMPLE=${MAIN_VERSION%%[-+]*}
          CURR_SIMPLE=${CURRENT_VERSION%%[-+]*}

          # Extract components
          main_major=${MAIN_SIMPLE%%.*}
          rest=${MAIN_SIMPLE#*.}
          main_minor=${rest%%.*}
          main_patch=${rest#*.}

          curr_major=${CURR_SIMPLE%%.*}
          restc=${CURR_SIMPLE#*.}
          curr_minor=${restc%%.*}
          curr_patch=${restc#*.}

          # Fallback to 0 if any piece is empty (defensive)
          [ -z "$main_major" ] && main_major=0
          [ -z "$main_minor" ] && main_minor=0
          [ -z "$main_patch" ] && main_patch=0
          [ -z "$curr_major" ] && curr_major=0
          [ -z "$curr_minor" ] && curr_minor=0
          [ -z "$curr_patch" ] && curr_patch=0

          echo "Parsed main version: major=$main_major, minor=$main_minor, patch=$main_patch"
          echo "Parsed curr version: major=$curr_major, minor=$curr_minor, patch=$curr_patch"

          # If major is increased, accept any minor/patch (major bump allowed)
          if [ "$curr_major" -gt "$main_major" ]; then
            echo "✔ Major version bumped (main: $MAIN_VERSION → current: $CURRENT_VERSION) — accepting any minor/patch"
            echo "| Status | ✅ Valid (major bump) |" >> $GITHUB_STEP_SUMMARY
            echo "| Change | Major version increase |" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Disallow major downgrade
          if [ "$curr_major" -lt "$main_major" ]; then
            echo "❌ Major version must not be decreased (main: $MAIN_VERSION → current: $CURRENT_VERSION)"
            echo "| Status | ❌ Invalid (major downgrade) |" >> $GITHUB_STEP_SUMMARY
            echo "| Issue | Major version cannot decrease |" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # At this point curr_major == main_major
          case "$BRANCH_NAME" in
            fix/*)
              if [ "$curr_minor" -eq "$main_minor" ] && [ "$curr_patch" -gt "$main_patch" ]; then
                echo "✔ Patch version correctly incremented for fix branch"
                echo "| Status | ✅ Valid (patch increment) |" >> $GITHUB_STEP_SUMMARY
                echo "| Required | Patch version bump for fix branches |" >> $GITHUB_STEP_SUMMARY
                exit 0
              else
                echo "❌ Patch version must be incremented for fix branches (main: $MAIN_VERSION → current: $CURRENT_VERSION)"
                echo "| Status | ❌ Invalid (no patch increment) |" >> $GITHUB_STEP_SUMMARY
                echo "| Required | Patch version bump for fix branches |" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
              ;;
            feature/*)
              if [ "$curr_minor" -gt "$main_minor" ]; then
                echo "✔ Minor version correctly incremented for feature branch"
                echo "| Status | ✅ Valid (minor increment) |" >> $GITHUB_STEP_SUMMARY
                echo "| Required | Minor version bump for feature branches |" >> $GITHUB_STEP_SUMMARY
                exit 0
              else
                echo "❌ Minor version must be incremented for feature branches (main: $MAIN_VERSION → current: $CURRENT_VERSION)"
                echo "| Status | ❌ Invalid (no minor increment) |" >> $GITHUB_STEP_SUMMARY
                echo "| Required | Minor version bump for feature branches |" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
              ;;
            *)
              echo "⚠️ Not a fix/ or feature/ branch – skipping version validation"
              echo "| Status | ⏭️ Skipped (not feature/fix branch) |" >> $GITHUB_STEP_SUMMARY
              echo "| Note | Version validation only applies to feature/ and fix/ branches |" >> $GITHUB_STEP_SUMMARY
              exit 0
              ;;
          esac

  extract_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract version
        id: extract
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          echo "## 📋 Version Information (Pull Request)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version | \`$VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Source | \`package.json\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | \`${{ github.head_ref }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Context | Pull Request Validation |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$VERSION" = "0.0.0" ]; then
            echo "ℹ️ **Development version detected** - validation will be limited." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Valid version detected** - full validation will run." >> $GITHUB_STEP_SUMMARY
          fi

  install_dependencies:
    runs-on: ubuntu-latest
    needs: [extract_version, validate_branch_name, validate_version_bump]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node with Yarn
        uses: ./.github/actions/setup-node 
        with:
          yarn-version: "4.9.2"
      - name: Install dependencies
        run: |
          set -x 
          echo "Starting yarn install"
          yarn install --immutable
          echo "Yarn install completed successfully"

  lint:
    runs-on: ubuntu-latest
    needs: [install_dependencies]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Lint
        uses: ./.github/actions/code-quality
        with:
          command: lint
      - name: Generate Lint Summary
        if: always()
        run: |
          echo "## 🔍 ESLint Code Quality Check (Pull Request)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ${{ job.status == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ **No linting issues found.** Code follows ESLint rules." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Linting issues detected!** Check the job logs for details." >> $GITHUB_STEP_SUMMARY
            echo "Run \`yarn lint\` locally to fix issues before pushing." >> $GITHUB_STEP_SUMMARY
          fi

  format_check_new:
    runs-on: ubuntu-latest
    needs: [install_dependencies]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Format Check
        uses: ./.github/actions/code-quality
        with:
          command: format
      - name: Generate Format Summary
        if: always()
        run: |
          echo "## 💅 Prettier Code Formatting Check (Pull Request)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Prettier Format | ${{ job.status == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ **Code is properly formatted.** All files follow Prettier rules." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Formatting issues detected!** Check the job logs for details." >> $GITHUB_STEP_SUMMARY
            echo "Run \`npx prettier --write .\` locally to auto-fix formatting issues." >> $GITHUB_STEP_SUMMARY
          fi

  typecheck:
    runs-on: ubuntu-latest
    needs: [install_dependencies]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Typecheck
        uses: ./.github/actions/code-quality
        with:
          command: typecheck
      - name: Generate Typecheck Summary
        if: always()
        run: |
          echo "## 🔷 TypeScript Type Checking (Pull Request)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript Types | ${{ job.status == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ **No type errors found.** All TypeScript types are valid." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Type errors detected!** Check the job logs for details." >> $GITHUB_STEP_SUMMARY
            echo "Run \`yarn typecheck\` locally to identify and fix type issues." >> $GITHUB_STEP_SUMMARY
          fi

  unit_test:
    runs-on: ubuntu-latest
    needs: [typecheck, format_check_new, lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node with Yarn
        uses: ./.github/actions/setup-node
        with:
          yarn-version: "4.9.2"
      - name: Install jest-junit
        shell: bash
        run: yarn add --dev jest-junit
      - name: Run Unit Tests and Generate Report
        shell: bash
        run: |
          echo "Running unit/integration tests..."
          yarn test --testResultsProcessor jest-junit
      - name: Generate Test Summary
        if: always()
        run: |
          # Parse test results and create summary
          if [ -f "junit.xml" ]; then
            TESTS=$(grep -o 'tests="[0-9]*"' junit.xml | head -1 | sed 's/tests="//;s/"//')
            FAILURES=$(grep -o 'failures="[0-9]*"' junit.xml | head -1 | sed 's/failures="//;s/"//')
            TIME=$(grep -o 'time="[0-9.]*"' junit.xml | head -1 | sed 's/time="//;s/"//')
            
            echo "## 🧪 Unit Test Results (Pull Request)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Tests | ${TESTS:-0} |" >> $GITHUB_STEP_SUMMARY
            echo "| Failed Tests | ${FAILURES:-0} |" >> $GITHUB_STEP_SUMMARY
            echo "| Execution Time | ${TIME:-0}s |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${FAILURES:-0}" -gt 0 ]; then
              echo "❌ **Some tests failed!** Check the test report artifact for details." >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **All tests passed!**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## 🧪 Unit Test Results (Pull Request)" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Test report not found or tests didn't run." >> $GITHUB_STEP_SUMMARY
          fi
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-report
          path: junit.xml
          retention-days: 2

  yarn_audit:
    runs-on: ubuntu-latest
    needs: [unit_test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node with Yarn
        uses: ./.github/actions/setup-node
        with:
          yarn-version: "4.9.2"
      - name: Run Yarn Audit
        run: |
          echo "Running Yarn Audit..."
          yarn npm audit --json > yarn-audit-report.json
          
          # Check for critical and high vulnerabilities and fail if found
          CRITICAL=$(jq -s '[.[] | select(.children.Severity == "critical")] | length' yarn-audit-report.json 2>/dev/null || echo "0")
          HIGH=$(jq -s '[.[] | select(.children.Severity == "high")] | length' yarn-audit-report.json 2>/dev/null || echo "0")
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "❌ Found $CRITICAL critical and $HIGH high vulnerabilities! Failing build."
            exit 1
          fi 
      - name: Generate Audit Summary
        if: always()
        run: |
          # Parse audit results
          if [ -f "yarn-audit-report.json" ]; then
            CRITICAL=$(jq -s '[.[] | select(.children.Severity == "critical")] | length' yarn-audit-report.json 2>/dev/null || echo "0")
            HIGH=$(jq -s '[.[] | select(.children.Severity == "high")] | length' yarn-audit-report.json 2>/dev/null || echo "0")
            MODERATE=$(jq -s '[.[] | select(.children.Severity == "moderate")] | length' yarn-audit-report.json 2>/dev/null || echo "0")
            LOW=$(jq -s '[.[] | select(.children.Severity == "low")] | length' yarn-audit-report.json 2>/dev/null || echo "0")
            INFO=$(jq -s '[.[] | select(.children.Severity == "info")] | length' yarn-audit-report.json 2>/dev/null || echo "0")
            
            echo "## 🔍 Dependency Audit Results (Pull Request)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| 🔴 Critical | ${CRITICAL} |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟠 High | ${HIGH} |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟡 Moderate | ${MODERATE} |" >> $GITHUB_STEP_SUMMARY
            echo "| 🔵 Low | ${LOW} |" >> $GITHUB_STEP_SUMMARY
            echo "| ℹ️ Info | ${INFO} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${CRITICAL}" -gt 0 ] || [ "${HIGH}" -gt 0 ]; then
              echo "❌ **Critical or high vulnerabilities found!** Build will fail. Review and fix issues." >> $GITHUB_STEP_SUMMARY
            elif [ "${MODERATE}" -gt 0 ]; then
              echo "⚠️ **Moderate severity vulnerabilities found.** Consider fixing before merge." >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **No blocking vulnerabilities found.**" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      - name: Upload Yarn Audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: yarn-audit-report
          path: yarn-audit-report.json
          retention-days: 2

  semgrep_scan:
    runs-on: ubuntu-latest
    needs: [unit_test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Semgrep
        run: pip install semgrep
      - name: Run Semgrep Scan
        run: semgrep scan --config p/owasp-top-ten --config p/javascript --config p/nodejs --output semgrep-SAST.json --error --debug --max-log-list-entries=0 ./src
      - name: Generate Semgrep Summary
        if: always()
        run: |
          # Parse Semgrep results
          if [ -f "semgrep-SAST.json" ]; then
            ERRORS=$(jq '.results | length' semgrep-SAST.json 2>/dev/null || echo "0")
            
            echo "## 🔒 Security Scan Results (Pull Request)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Security Issues Found | ${ERRORS} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${ERRORS}" -gt 0 ]; then
              echo "⚠️ **Security issues detected!** Check the Semgrep report artifact for details." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Top Issues:" >> $GITHUB_STEP_SUMMARY
              jq -r '.results[0:5][] | "- **\(.check_id)**: \(.path):\(.start.line)"' semgrep-SAST.json 2>/dev/null || echo "Unable to parse issues" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **No security issues found.**" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      - name: Upload Semgrep report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-report
          path: semgrep-SAST.json
          retention-days: 2

  gitleaks_scan:
    runs-on: ubuntu-latest
    needs: [unit_test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Install Gitleaks (via action)
        uses: gitleaks/gitleaks-action@v2
        with:
          scan-folder: /tmp  # dummy scan to install gitleaks
      - name: Run Gitleaks Scan
        run: |
          gitleaks detect --verbose --redact --commit-from ${{ github.event.pull_request.base.sha }} --commit-to ${{ github.event.pull_request.head.sha }}
          EXIT_CODE=$?
          echo "GITLEAKS_EXIT_CODE=$EXIT_CODE" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate Gitleaks Summary
        if: always()
        run: |
          echo "## 🔐 Gitleaks Secret Scan Results (Pull Request)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ env.GITLEAKS_EXIT_CODE }}" = "0" ]; then
            echo "| Secret Scan | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **No secrets or sensitive data found.** Repository is clean." >> $GITHUB_STEP_SUMMARY
          else
            echo "| Secret Scan | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Secrets or sensitive data detected!** Check the job logs for details." >> $GITHUB_STEP_SUMMARY
            echo "Remove or properly secure any found secrets before merging." >> $GITHUB_STEP_SUMMARY
          fi

  build_and_scan:
    runs-on: ubuntu-latest
    needs: [gitleaks_scan, semgrep_scan, yarn_audit]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node with Yarn
        uses: ./.github/actions/setup-node
        with:
          yarn-version: "4.9.2"

      - name: Install dependencies and build
        run: |
          yarn install --immutable
          yarn build
          mkdir -p artifacts
          cp -r out/* artifacts/ || cp -r build/* artifacts/ || cp -r dist/* artifacts/
          cd artifacts
          
          # Calculate build metrics
          ARCHIVE_SIZE=$(du -sh . | cut -f1)
          FILE_COUNT=$(find . -type f | wc -l)
          echo "ARCHIVE_SIZE=$ARCHIVE_SIZE" >> $GITHUB_ENV
          echo "FILE_COUNT=$FILE_COUNT" >> $GITHUB_ENV

      - name: Generate Build Validation Summary
        if: always()
        run: |
          echo "## 🏗️ Build Validation Summary (Pull Request)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build Status | ✅ Successful |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Size | ${{ env.ARCHIVE_SIZE }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Files Count | ${{ env.FILE_COUNT }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | \`${{ github.head_ref }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Context | Pull Request Validation |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build validation passed!** Static files are ready for deployment." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** This is a validation build only. Release artifacts will be created on merge to main branch." >> $GITHUB_STEP_SUMMARY

      - name: Scan build artifacts with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "artifacts/"
          format: "sarif"
          output: "trivy-fs-results.sarif"
          severity: "HIGH,CRITICAL"
          exit-code: 1
          scanners: vuln,secret,misconfig

      - name: Generate Trivy Summary
        if: always()
        run: |
          # Parse Trivy SARIF results
          if [ -f "trivy-fs-results.sarif" ]; then
            CRITICAL=$(jq '.runs[0].results | length' trivy-fs-results.sarif 2>/dev/null || echo "0")
            
            echo "## 🛡️ Trivy Sec Audit Results (Pull Request)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Findings |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| 🔴 Critical | ${CRITICAL} |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟠 High | 0 (filtered) |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟡 Medium+ | 0 (filtered) |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${CRITICAL}" -gt 0 ]; then
              echo "❌ **Critical security issues found in build artifacts!**" >> $GITHUB_STEP_SUMMARY
              echo "Build cannot proceed with critical vulnerabilities." >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **No critical security issues found in build artifacts.**" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Upload Trivy FS report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-fs-report
          path: trivy-fs-results.sarif
          retention-days: 2
